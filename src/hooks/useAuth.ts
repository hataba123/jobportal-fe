// üìÅ src/hooks/useAuth.ts
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { getUser, loginUser, logoutUser } from "@/lib/api/auth";
import type { User } from "@/types/user";
import type { LoginCredentials } from "@/types/auth";
import {
  getAccessToken,
  setAccessToken,
  clearAccessToken,
} from "@/utils/token";

export function useAuth() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  // Khi component mount, ki·ªÉm tra token v√† g·ªçi API getUser
  useEffect(() => {
    const token = getAccessToken();
    if (!token) {
      setLoading(false);
      return;
    }

    getUser(token) // truy·ªÅn token n·∫øu c·∫ßn
      .then(setUser)
      .catch(() => setUser(null))
      .finally(() => setLoading(false));

    // ‚ùå N·∫øu d√πng cookie httpOnly:
    // getUser() // credentials: 'include' b√™n trong
    //   .then(setUser)
    //   .catch(() => setUser(null))
    //   .finally(() => setLoading(false));
  }, []);

  /**
   * H√†m x·ª≠ l√Ω ƒëƒÉng nh·∫≠p
   */
  const login = async (credentials: LoginCredentials) => {
    try {
      const { user: loggedInUser, accessToken } = await loginUser(credentials);
      setUser(loggedInUser);
      setAccessToken(accessToken); // l∆∞u token v√†o localStorage

      // ‚ùå N·∫øu d√πng cookie httpOnly:
      // Kh√¥ng c·∫ßn l∆∞u token, ch·ªâ c·∫ßn setUser()

      router.push("/");
    } catch (err) {
      console.error("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i:", err);
      throw err;
    }
  };

  /**
   * H√†m x·ª≠ l√Ω ƒëƒÉng xu·∫•t
   */
  const logout = async () => {
    await logoutUser(); // N·∫øu API h·ªó tr·ª£ xo√° session/token server-side
    clearAccessToken(); // Xo√° token trong localStorage
    setUser(null);
    router.push("/");
  };

  return {
    user,
    login,
    logout,
    loading,
    isAuthenticated: !!user,
  };
}
